"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {

    userProfile(language: String):User @middleware(checks: ["auth:api","status"]) @SetLanguage
    userActiveTime:User @middleware(checks: ["auth:api","status"]) @SetLanguage
    userProperties(is_public_status: [IsPublicStatusEnum],  property_type: [String],  price_order:String, first: Int, page: Int, orderBy:OrderBy, language: String ):[Property] @middleware(checks: ["auth:api","status"]) @SetLanguage
    userProperty(id:ID):Property @middleware(checks: ["auth:api","status"]) @SetLanguage

    userSaveProperties(first: Int, page: Int, orderBy:OrderBy, language: String):[Property] @middleware(checks: ["auth:api","status"]) @SetLanguage
    userSavePropertyById(id:Int, language: String):Property  @middleware(checks: ["auth:api","status"]) @SetLanguage

    userFavoriteProperties( property_type: [String],  price_order:String, first: Int, page: Int, orderBy:OrderBy, language: String):[UserFavoriteProperty] @middleware(checks: ["auth:api","status"]) @SetLanguage
    userFavoritePropertyById(id:Int, language: String):UserFavoriteProperty  @middleware(checks: ["auth:api","status"]) @SetLanguage

    saveUserFilters(language: String, orderBy:OrderBy): [SaveUserFilterJson] @middleware(checks: ["auth:api","status"]) @SetLanguage
    saveUserFilterById(id:ID!, language: String): SaveUserFilterJson  @middleware(checks: ["auth:api","status"]) @SetLanguage

    userSupport(id:Int!, language: String): Support @middleware(checks: ["auth:api","status"]) @SetLanguage
    userSupports(input: UserSupportInput @spread): [Support] @middleware(checks: ["auth:api","status"]) @SetLanguage

    userArchiveProperties(first: Int, page: Int, orderBy:OrderBy, language: String):[Property] @middleware(checks: ["auth:api","status"]) @SetLanguage

    # Suggests Price Property
    propertySuggestsPrice(property_id: ID!, checked: Boolean,  first: Int, page: Int, orderBy:OrderBy, language: String): [SuggestsPriceProperty]  @middleware(checks: ["auth:api","status"]) @SetLanguage
    userSuggestsPriceProperty(property_id: ID!, checked: Boolean,  first: Int, page: Int, orderBy:OrderBy, language: String): [SuggestsPriceProperty]  @middleware(checks: ["auth:api","status"]) @SetLanguage
    userInfo(user_id:ID!, language: String): UserInfo  @SetLanguage
#    phones(orderBy: [OrderByClause!] @orderBy): [Phone]! @all
#    phonesPaginate(orderBy: [OrderByClause!] @orderBy): [Phone]! @paginate(defaultCount: 10)
#    phone(id: ID @eq): Phone @find

    userTypes(language: String,orderBy: [OrderByClause!] @orderBy): [UserType]! @all  @SetLanguage
    userTypesPaginate(language: String,orderBy: [OrderByClause!] @orderBy): [UserType]! @paginate(defaultCount: 10)  @SetLanguage
    userType(id: ID @eq, language: String): UserType @find  @SetLanguage

    languages(orderBy: [OrderByClause!] @orderBy): [Language]! @all
    languagesPaginate: [Language] @paginate(defaultCount: 10)
    language(id: ID @eq): Language @find

    currencyTypes(orderBy: [OrderByClause!] @orderBy): [CurrencyType]! @all
    currencyTypesPaginate: [CurrencyType] @paginate(defaultCount: 10)
    currencyType(id: ID @eq): CurrencyType @find

    getPropertyTypeFilters(property_type:PropertyTypeEnum):[Filter]

#    translations(orderBy: [OrderByClause!] @orderBy): [Translation] @all
#    translationsPaginate(orderBy: [OrderByClause!] @orderBy): [Translation] @paginate(defaultCount: 10)
#    translation(id: ID @eq): Translation @find

#    propertyTypes(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyType] @all @SetLanguage
#    propertyTypesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyType!] @paginate(defaultCount: 10) @SetLanguage
#    propertyType(id: ID @eq,language: String): PropertyType @find @SetLanguage

#    dealTypes(language: String, orderBy: [OrderByClause!] @orderBy): [DealType] @all @SetLanguage
#    dealTypes(language: String, orderBy: [OrderByClause!] @orderBy): [DealType] @paginate(defaultCount: 10) @SetLanguage
#    dealType(id: ID @eq, language: String): DealType @find @SetLanguage

    buldingTypes(language: String, orderBy: [OrderByClause!] @orderBy): [BuldingType] @all @SetLanguage
    buldingTypesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [BuldingType] @paginate(defaultCount: 10) @SetLanguage
    buldingType(id: ID @eq,language: String): BuldingType @find @SetLanguage

    # properties

#    propertiesPublished(language: String, orderBy:OrderBy):[Property]   @SetLanguage
#    propertiesPublishedPaginate(first: Int, page: Int,language: String, orderBy:OrderBy ):[Property]  @SetLanguage

#    propertiesRejected(language: String, orderBy:OrderBy): [Property]  @SetLanguage
#    propertiesRejectedPaginate(first: Int, page: Int, language: String, orderBy:OrderBy ):[Property]  @SetLanguage

#    propertiesUnderReview(language: String, orderBy:OrderBy): [Property]  @SetLanguage
#    propertiesUnderReviewPaginate(first: Int, page: Int, language: String, orderBy:OrderBy ):[Property] @SetLanguage

    property(id: ID,language: String): Property @SetLanguage
    propertiesPublishedFilters( input: PropertiesPublishedFiltersInput @spread ):[Property] @SetLanguage
    notificationProperties(first: Int, page: Int, orderBy:OrderBy, language: String): [NotificationUsersProperties] @middleware(checks: ["auth:api","status"]) @SetLanguage
    similarProperties(id:ID, language: String): [Property] @SetLanguage

#    propertyImages(orderBy: [OrderByClause!] @orderBy): [PropertyImage] @all
#    propertyImagesPaginate(orderBy: [OrderByClause!] @orderBy): [PropertyImage] @paginate(defaultCount: 10)
#    propertyImage(id: ID @eq): PropertyImage @find

#    filtersValues(language: String, orderBy: [OrderByClause!] @orderBy): [FiltersValue] @all @SetLanguage
#    filtersValuesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [FiltersValue] @paginate(defaultCount: 10) @SetLanguage
#    filtersValue(id: ID @eq,language: String): FiltersValue @find @SetLanguage
#
#    filters(language: String,orderBy: [OrderByClause!] @orderBy): [Filter] @all @SetLanguage
#    filtersPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [Filter] @paginate(defaultCount: 10) @SetLanguage
#    filter(id: ID @eq,language: String): Filter @find @SetLanguage

#    filterGroups(language: String, orderBy: [OrderByClause!] @orderBy): [FilterGroup] @all @SetLanguage
#    filterGroups(language: String, orderBy: [OrderByClause!] @orderBy): [FilterGroup] @paginate(defaultCount: 10) @SetLanguage
#    filterGroup(id: ID @eq,language: String): FilterGroup @find @SetLanguage

#    propertyDeals(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyDeal] @all @SetLanguage
#    propertyDealsPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyDeal] @paginate(defaultCount: 10) @SetLanguage
#    propertyDeal(id: ID @eq,language: String): PropertyDeal @find @SetLanguage

#    translateDescription(orderBy: [OrderByClause!] @orderBy): [TranslateDescription] @all
#    translateDescriptionPaginate(orderBy: [OrderByClause!] @orderBy): [TranslateDescription] @paginate(defaultCount: 10)
#    translateDescription(id: ID @eq): TranslateDescription @find


#    userFavoriteProperties(language: String, orderBy: [OrderByClause!] @orderBy): [UserFavoriteProperty] @all @SetLanguage
#    userFavoritePropertiesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [UserFavoriteProperty] @paginate(defaultCount: 10) @SetLanguage
#    userFavoriteProperty(id: ID @eq,language: String): UserFavoriteProperty @find @SetLanguage



    #  create new Query
    propertyTypeFilterGroup(property_type_id:Int, language: String):String @SetLanguage
    propertyFilterGroupFilters(property_id:Int, language: String):String @SetLanguage
     
    #Admin
    adminUsers(input: AdminUserInput @spread) :[User]  @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminUser(id: ID @eq, language: String) :User @find  @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminProperties(input: AdminPropertiesFiltersInput @spread):PropertiesPaginate  @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminProperty(id: ID @eq,language: String): Property @find @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminSupport(id: ID @eq,language: String): Support @find  @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminSupports(input: AdminSupportInput @spread) :[Support]  @middleware(checks: ["auth:api","admin"])  @SetLanguage

     #test
     test(language: String):String @SetLanguage







}

type Mutation {
    # login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    # forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    # updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @NewPasswordWithCodeInputValidation @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    # register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    # socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    # verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    # updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
     
    loginUser(input: LoginInput @spread): AuthPayloadLogin! @LoginInputValidation @SetLanguage
    socialLoginUser(input: SocialLoginInput! @spread): AuthPayloadUser!
    registerUser(input: RegisterInput @spread): RegisterResponse! @RegisterInputValidation @SetLanguage
    verifyEmailUser(input: VerifyEmailInput! @spread): AuthPayload! @VerifyEmailInputValidation @SetLanguage
    forgotPasswordUser(input: ForgotPasswordInput!  @spread): ForgotPasswordResponse!  @ForgotPasswordInputValidation @SetLanguage
    resetPasswordUser(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @NewPasswordWithCodeInputValidation @SetLanguage

    updateUserProfile(input: updateUserProfileInput @spread): User! @UpdateUserProfileValidation @middleware(checks: ["auth:api","status"]) @SetLanguage
    deleteUserProfile(password: String!,language: String):Boolean @middleware(checks: ["auth:api","status"]) @SetLanguage


#    createUserType(name: String!): UserType! @create
#    updateUserType(id:ID!,name: String): UserType! @update
#    deleteUserType(id:ID!): UserType! @delete

#    createTranslation(name: String!, translated_name: String!, language_id: Int!): Translation! @create
#    updateTranslation( id: ID!,name: String, translated_name: String, language_id: Int!): Translation! @update
#    deleteTranslation(id:ID!): Translation! @delete

#    createPropertyType(name: String!): PropertyType! @create
#    updatePropertyType(id:ID!,name: String): PropertyType! @update
#    deletePropertyType(id:ID!): PropertyType! @delete

#    createDealType(name: String!): DealType! @create
#    updateDealType(id:ID!,name: String): DealType! @update
#    deleteDealType(id:ID!): DealType! @delete

#    createFiltersValue(filter_id: Int!, property_id: Int!, value: String!): FiltersValue! @create
#    updateFiltersValue( id: ID!,filter_id: Int, property_id: Int,value: String): FiltersValue! @update
#    deleteFiltersValue(id:ID!): FiltersValue! @delete

#    createFilter(name: String!, filter_group_id: Int ): Filter! @create
#    updateFilter(id:ID!,name: String,  filter_group_id: Int): Filter! @update
#    deleteFilter(id:ID!): Filter! @delete

#    createFilterGroup(name: String!): FilterGroup! @create
#    updateFilterGroup(id:ID!,name: String): FilterGroup! @update
#    deleteFilterGroup(id:ID!): FilterGroup! @delete


    createProperty(input: CreatePropertyInput @spread):Property!  @middleware(checks: ["auth:api","status"]) @SetLanguage
    updateProperty(input: UpdatePropertyInput @spread): Property  @middleware(checks: ["auth:api","status"]) @SetLanguage
    deleteProperty(id:ID!,language: String): Property!  @middleware(checks: ["auth:api","status"]) @SetLanguage
    deletePropertyImages(images_ids:[Int!]!,language: String): Boolean!  @middleware(checks: ["auth:api","status"]) @SetLanguage
    propertyImagePosition(images_ids:[Int!]!,language: String): Boolean!  @middleware(checks: ["auth:api","status"]) @SetLanguage
    saveProperty(input: SavePropertyInput @spread):Property!  @middleware(checks: ["auth:api","status"]) @SetLanguage
    addViewCount(id:ID!,language: String): Status @SetLanguage
    updateTimeProperty(id:ID!,language: String): Status @middleware(checks: ["auth:api","status"]) @SetLanguage
    canceledProperty(id:ID!,language: String): Status @middleware(checks: ["auth:api","status"]) @SetLanguage
    setPropertyTop(id:ID!,language: String):Property  @middleware(checks: ["auth:api","status"]) @SetLanguage

    # Suggests Price for Property    
    createSuggestsPriceProperty(property_id:Int!, price: Float!, currency_type_id: Int!, end_time:DateTime , language: String): SuggestsPriceProperty  @middleware(checks: ["auth:api","status"]) @SetLanguage
    updateSuggestsPriceProperty(id:Int!, property_id:Int, price: Float, currency_type_id: Int, end_time:DateTime , language: String): SuggestsPriceProperty  @middleware(checks: ["auth:api","status"]) @SetLanguage
    deleteSuggestsPriceProperty(id:ID!, language: String): Status  @middleware(checks: ["auth:api","status"]) @SetLanguage
    SetCheckedSuggestsPriceProperty(id:Int!, checked:Boolean!): SuggestsPriceProperty  @middleware(checks: ["auth:api","status"]) @SetLanguage
    setNoteSuggestsPriceProperty(id:ID!, note:String, language: String): SuggestsPriceProperty  @middleware(checks: ["auth:api","status"]) @SetLanguage

#    createPropertyDeal( property_id: Int!, deal_type_id: Int!, price: Float!, currency_type_id: Int!): PropertyDeal! @create
#    updatePropertyDeal(id:ID!,property_id: Int!, deal_type_id: Int!, price: Float!, currency_type_id: Int!): PropertyDeal! @update
#    deletePropertyDeal(id:ID!): PropertyDeal! @delete


#    createTranslateDescription( property_id: Int!, language_id: Int!, description: String!): TranslateDescription! @create
#    updateTranslateDescription(id:ID!,property_id: Int, language_id: Int, description: String): TranslateDescription! @update
#    deleteTranslateDescription(id:ID!): TranslateDescription! @delete

    createUserFavoriteProperty(property_id:Int!, language: String): UserFavoriteProperty! @middleware(checks: ["auth:api","status"]) @SetLanguage
    updateUserFavoriteProperty(id:ID!, property_id:Int!, language: String): UserFavoriteProperty!  @middleware(checks: ["auth:api","status"]) @SetLanguage
    deleteUserFavoriteProperty(id:ID!): Status  @middleware(checks: ["auth:api","status"]) @SetLanguage
    deleteUserFavoritePropertys(ids: [Int!]): Status  @middleware(checks: ["auth:api","status"]) @SetLanguage

    createSaveUserFilter(input: PropertiesPublishedFiltersInput @spread): Status @middleware(checks: ["auth:api","status"]) @SetLanguage
    updateSaveUserFilter(id:ID! ,input: PropertiesPublishedFiltersInput @spread): Status @middleware(checks: ["auth:api","status"]) @SetLanguage
    deleteSaveUserFilter(id:ID!, language: String): Status @middleware(checks: ["auth:api","status"]) @SetLanguage

    #support
    guestSupport(name:String!, email:String! @rules(apply: ["required","email"]), text:String!, language: String ): Status @SetLanguage
    authSupport(text:String!, language: String): Status @middleware(checks: ["auth:api","status"]) @SetLanguage

   
    # Notification

    # SawNotificationProperties( notificationProperties_ids:[Int] ): Boolean @middleware(checks: ["auth:api","status"]) @SetLanguage


    # ADMIN
    adminUpdateUserProfile(input: AdminUpdateUserProfileInput @spread): User! @UpdateUserProfileValidation @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminUpdateProperty(input: AdminUpdatePropertyInput @spread): Property @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminCreateProperty(input: AdminCreatePropertyInput @spread): Property @middleware(checks: ["auth:api","admin"])  @SetLanguage
    
    adminSupport(id:Int!, title:String, body:String!, is_support_status:String): Status @middleware(checks: ["auth:api","admin"])  @SetLanguage
    adminUpdateSupport(id:Int!, is_support_status:String): Status @middleware(checks: ["auth:api","admin"])  @SetLanguage

    createLanguage(name: String!,code:String!,flag_image:Upload!, language: String): Language!  @middleware(checks: ["auth:api","admin"])  @SetLanguage
    updateLanguage(id:ID!,name: String,code:String,flag_image:Upload, language: String): Language!  @middleware(checks: ["auth:api","admin"])  @SetLanguage
    deleteLanguage(id:ID!,language: String): Language!  @middleware(checks: ["auth:api","admin"])  @SetLanguage

    createCurrencyType( name: String!, symbol: String!, is_current: Boolean, rate: Float ): CurrencyType! @create @middleware(checks: ["auth:api","admin"])  @SetLanguage
    updateCurrencyType(id:ID!, name: String, symbol: String, is_current: Boolean, rate: Float): CurrencyType! @update @middleware(checks: ["auth:api","admin"])  @SetLanguage
    deleteCurrencyType(id:ID!): CurrencyType! @delete @middleware(checks: ["auth:api","admin"])  @SetLanguage

    createBuldingType(name: String!): BuldingType! @create
    updateBuldingType(id:ID!,name: String): BuldingType! @update
    deleteBuldingType(id:ID!): BuldingType! @delete


    #  test
    getimage:String
    testI(token:String): String


}

#test

input TestInput{
   file:  [Upload!],
   text: [Mytext]
}

input Mytext{
    max: Int,
    my: String
}





input updateUserProfileInput{
     image:Upload
     full_name: String
     email: String
     user_type: String
     old_password: String 
     password: String
     password_confirmation: String
     phone: [NewPhone!]
     update_phone: [UpdatePhone!]
     delete_phone: [Int!]
     language: String

}

input NewPhone{
    number: String!
    viber: Boolean
    whatsapp: Boolean
    telegram: Boolean

}
input UpdatePhone{
    phone_id: Int
    number: String!
    viber: Boolean
    whatsapp: Boolean
    telegram: Boolean
}

input CreatePropertyInput{
    property_id: Int,
    property_key: String,
    property_type: String!,
    property_deal_types:[PropertyDealTypes!]!,
    bulding_type_id: Int,
    latitude: Float!,
    longitude: Float!,
    address: String!,
    postal_code: String,
    property_state: String,
    property_images:[Upload],
    property_images_delete_ids: [Int!],
    property_filter_values: [PropertyFilterValue!], 
    translate_descriptions: [TranslateDescriptionInput],
    email: String,
    is_bids: Boolean,
    is_address_precise: Boolean
    language: String
}

input UpdatePropertyInput{
    id:ID!
    property_key: String,
    property_type: String,
    property_deal_types:[PropertyDealTypes!],
    bulding_type_id: Int,
    latitude: Float,
    longitude: Float,
    address: String,
    postal_code: String,
    property_state: String,
    email: String
    is_address_precise: Boolean
    property_images:[Upload],
    property_images_delete_ids: [Int!],
    property_filter_values: [PropertyFilterValue!], 
    translate_descriptions: [TranslateDescriptionInput],
    is_archive: Boolean
    is_bids: Boolean,
    language: String
}
input SavePropertyInput{
    property_id: Int,
    property_key: String,
    property_type: String,
    property_deal_types:[PropertyDealTypes],
    bulding_type_id: Int,
    latitude: Float,
    longitude: Float,
    address: String,
    postal_code: String,
    property_state: String,
    property_images:[Upload],
    is_archive: Boolean,
    email: String,
    is_bids: Boolean,
    is_address_precise: Boolean,
    property_filter_values: [PropertyFilterValue], 
    translate_descriptions: [TranslateDescriptionInput],
    language: String
}
input PropertiesPublishedFiltersInput{
      place:[placeInput],
      property_type: [String],
      user_type: String,
      area: MinMax,
      deal_types: [PropertyDealTypesEnum],
      number_of_floors_of_the_building:MinMax,
      apartment_floor:MinMax,
      number_of_rooms:MinMax,
      number_of_bathrooms: Int,
      property_state: String,
      bulding_type_id: Int,
      filters:[PropertyFilterValue],
      price_filters: [PriceFilter],
      price_order:String,
      paginate: PaginateInput,
      language: String,
}
input placeInput{
    latitude: Float,
    longitude: Float,
    radius: Int
}
input MinMax{
    min:Int,
    max: Int
}

input PriceFilter{
    currency_type_id: Int,
    deal_type: String!,
    min: Int,
    max: Int,
}
input PropertyDealTypes{
    deal_type: String!,
    price: Float!,
    currency_type_id: Int!
}
input TranslateDescriptionInput{
    language: String!
    description: String!
}
input ImageAndType{
    type: String!
    image: String!
}
input PropertyFilterValue{
    filter: String!
    value: String
    deal_type: DealTypeEnum
}
input OrderBy{
    field: String!
    order: String!
}
input PaginateInput{
      first: Int,
      page: Int
      }
type PropertyPaginate{
    data: [Property]!
    paginatorInfo: PaginatorInfo
}
type PaginatorInfo {
      count: Int!
      currentPage: Int!
      firstItem: Int
      hasMorePages: Boolean!
      lastItem: Int
      lastPage: Int!
      perPage: Int!
      total: Int!
    }
type Phone{
    id: ID!
    number:String!
    user_id:ID!
    user: User!
    viber: Boolean
    whatsapp: Boolean
    telegram: Boolean
}
type UserType{
    id: ID!
    name: String!
    users:[User!]!
}
type User {
    id: ID!
    full_name: String 
    picture: ImageQuality
    email: String
    phones:[Phone]
    user_type:UserType 
    first_time: Date
    is_admin: Boolean
    is_delete: Boolean
    is_block: Boolean
    reason: String
    block_start: DateTime
    block_end: DateTime
    last_active_time: DateTime
    provider: String
    email_verified_at: DateTime,
    login_phone: String
    created_at: DateTime
}

type UserInfo{
    id: ID!
    full_name: String! 
    picture: ImageQuality
    email: String!
    phones:[Phone!]
    user_type:UserType! 
    first_time: Date
    last_active_time: DateTime
}

type ImageQuality {
    original: String
    min: String
}

type Support{
    id: ID
    user: User
    name: String
    email: String
    text: String
    is_support_status: String,
    created_at: DateTime
    updated_at: DateTime
}
type Language {
    id: ID!
    name: String!
    code: String!
    flag_image: String!
    translations: [Translation!]!

}
type Translation{
    id: ID!
    name: String!
    translated_name: String!
    language: Language!
}
type PropertyType{
    id: ID!
    name: String!
    properties: [Property!]!
    filters: [Filter!]!
}
type CurrencyType{
     id: ID!
     name: String!
     symbol: String!
     is_current: Boolean
     rate: Float
}
type DealType{
    id: ID!
    name: String!
    properties: [Property!]!
    property_deals: [PropertyDeal!]!
}
type BuldingType{
    id: ID!
    name: String!
    properties: [Property!]!
}
type PropertyDeal{
    id: ID!
    deal_type:DealType
    property: Property
    price: Float!
    price_usd: Float
    currency_type: CurrencyType
}
type Property{
    id: ID!
    property_key: String
    property_type: PropertyType
    user: User
    property_deals: [PropertyDeal]
    deal_types: [DealType]
    bulding_type: BuldingType
    latitude: Float
    longitude: Float
    address: String
    postal_code: String
    property_state: String
    created_at: DateTime
    updated_at: DateTime
    property_images:[PropertyImage] 
    property_images_paginat:[PropertyImage] @hasMany(type: "paginator")
    filters_values: [FiltersValue]
    filters_values_not_null: [FiltersValue]
    filters_values_speciale: [FiltersValue]
    translate_descriptions: [TranslateDescription]
    review: String
    update_count:Int
    last_update:DateTime
    next_update:DateTime
    is_public_status: String
    is_address_precise: Boolean
    is_save: Boolean
    is_archive: Boolean
    is_delete: Boolean
    email: String
    is_bids: Boolean
    view: Int,
    is_top: Boolean
    top_start:DateTime
    top_end:DateTime,
    same_place_group:String
}
type PropertiesPaginate{
   properties: [Property]
   total: Int
   lastPage: Int
}

type Status{
    status: Boolean
}

type TranslateDescription{
    id: ID!
    property: Property!
    language: Language!
    description:String
}
type PropertyImage{
    id:ID!
    property: Property!
    name: ImageQuality
    index:Int!
}
type FiltersValue{
    id: ID!
    filter: Filter!
    property: Property!
    value: String
}
type FilterPropertyType{
    id: ID!
    filter_id: Int!
    property_type_id: Int!
}
type FilterGroup{
    id: ID!
    name: String!
    filters: [Filter!]!
}
type Filter{
    id: ID!
    name: String!
    deal_type: DealTypeEnum
    filters_values: [FiltersValue!]!
    property_types: [PropertyType!]!
    filter_group_id:ID
    filter_group: FilterGroup
}
type UserFavoriteProperty{
    id:ID
    user: User
    property: Property
    created_at: DateTime
    updated_at: DateTime
}

type SaveUserFilterJson{
      id:ID,
      place:[placeType],
      property_type: [String],
      user_type: String,
      area: MinMaxType,
      number_of_floors_of_the_building:MinMaxType,
      apartment_floor:MinMaxType,
      number_of_rooms:MinMaxType,
      number_of_bathrooms: Int,
      property_state: String,
      bulding_type_id: Int,
      filters:[PropertyFilterValueType],
      price_filters: [PriceFilterType],
      language: String,
}

type placeType{
    latitude: Float,
    longitude: Float,
    radius: Int
}
type MinMaxType{
    min:Int,
    max: Int
}
type PriceFilterType{
    currency_type_id: Int!,
    deal_type: String!,
    min: Int,
    max: Int,
}
type PropertyFilterValueType{
    filter: String!
    value: String
    deal_type: DealTypeEnum
}

type NotificationUsersProperties{
    id:ID
    user: User
    property: Property
    created_at: DateTime
    updated_at: DateTime
}

type SuggestsPriceProperty{
     id:ID,
     user: User
     property: Property
     price: Float!
     currency_type: CurrencyType
     is_checked: Boolean
     note: String
     end_time: DateTime
     created_at: DateTime
     updated_at: DateTime
}



enum PropertyTypeEnum {
  apartment @enum(value: apartment)
  mansion @enum(value: mansion)
  land_area @enum(value: land_area)
  commercial_area @enum(value: commercial_area)
}

enum PropertyStateEnum {
  good @enum(value: good)
  average @enum(value: average)
  poor @enum(value: poor)
}

enum IsPublicStatusEnum {
  under_review @enum(value: under_review)
  published @enum(value: published)
  rejected @enum(value: rejected)
  canceled @enum(value: canceled)
}

enum DealTypeEnum {
  sell @enum(value: sell)
  rent @enum(value: rent)
}

enum PropertyDealTypesEnum {
    sale @enum(value: sale)
    monthly_rental_fee @enum(value: monthly_rental_fee)
    daily_rental_fee @enum(value: daily_rental_fee)
}
  
#ADMIN
input AdminUpdateUserProfileInput{
    user_id: Int!
    is_delete: Boolean
    is_block: Boolean
    reason: String
    block_start: DateTime
    block_end: DateTime
    image:Upload
    full_name: String
    email: String
    user_type: String
    password: String
    password_confirmation: String
    phone: [NewPhone!]
    update_phone: [UpdatePhone!]
    delete_phone: [Int!]
    language: String
}
input AdminCreatePropertyInput{
    email: String
    phone: String
    password: String
    password_confirmation: String
    property_key: String,
    property_type: String!,
    property_deal_types:[PropertyDealTypes!]!,
    bulding_type_id: Int,
    latitude: Float!,
    longitude: Float!,
    address: String!,
    postal_code: String,
    property_state: String,
    property_images:[Upload],
    property_filter_values: [PropertyFilterValue!], 
    translate_descriptions: [TranslateDescriptionInput],
    language: String
}

input AdminUserInput{
    user_type: String,
    user_id: Int,
    full_name: String,
    email: String,
    phone_number:String,
    is_delete: Boolean,
    is_block: Boolean,
    order_by: String,
    paginate: PaginateInput,
}
input AdminSupportInput{
    user_id: Int,
    name: String,
    email: String,
    is_support_status: [String],
    order_by: String,
    paginate: PaginateInput,
}
input UserSupportInput{
    is_support_status: [String],
    order_by: String,
    paginate: PaginateInput,
}

input AdminPropertiesFiltersInput{
    public_status: String,
    is_delete: Boolean,
    is_archive: Boolean,
    is_save: Boolean,
    user_is_delete: Boolean,
    user_is_block: Boolean,
    user_id: Int,
    property_id: Int,
    place:[placeInput],
    property_type: String,
    user_type: String,
    area: MinMax,
    deal_types: [PropertyDealTypesEnum],
    number_of_floors_of_the_building:MinMax,
    apartment_floor:MinMax,
    number_of_rooms:MinMax,
    number_of_bathrooms: Int,
    property_state: String,
    bulding_type_id: Int,
    filters:[PropertyFilterValue],
    price_filters: [PriceFilter],
    price_order:String,
    paginate: PaginateInput,
    language: String,
}
input AdminUpdatePropertyInput{
    id:ID!
    public_status: String,
    review: String,
    is_delete: Boolean,
    is_archive: Boolean,
    property_key: String,
    property_type: String,
    property_deal_types:[PropertyDealTypes!],
    bulding_type_id: Int,
    latitude: Float,
    longitude: Float,
    address: String,
    postal_code: String,
    property_state: String,
    email: String,
    is_bids: Boolean,
    is_address_precise: Boolean,
    property_images:[Upload],
    property_images_delete_ids: [Int!],
    property_filter_values: [PropertyFilterValue!],
    translate_descriptions: [TranslateDescriptionInput],
    language: String
}
