"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {

    users(orderBy: [OrderByClause!] @orderBy): [User!]! @all @middleware(checks: ["auth:api"]) 
    usersPaginate(orderBy: [OrderByClause!] @orderBy): [User!]! @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])
    user(id: ID @eq): User @find @middleware(checks: ["auth:api"])

    phones(orderBy: [OrderByClause!] @orderBy): [Phone!]! @all 
    phonesPaginate(orderBy: [OrderByClause!] @orderBy): [Phone!]! @paginate(defaultCount: 10)
    phone(id: ID @eq): Phone @find

    userTypes(language: String,orderBy: [OrderByClause!] @orderBy): [UserType!]! @all  @SetLanguage
    userTypesPaginate(language: String,orderBy: [OrderByClause!] @orderBy): [UserType!]! @paginate(defaultCount: 10)  @SetLanguage
    userType(id: ID @eq, language: String): Phone @find  @SetLanguage

    languages(orderBy: [OrderByClause!] @orderBy): [Language!]! @all
    languagesPaginate: [Language!]! @paginate(defaultCount: 10)
    language(id: ID @eq): Language @find

    translations(orderBy: [OrderByClause!] @orderBy): [Translation!]! @all
    translationsPaginate(orderBy: [OrderByClause!] @orderBy): [Translation!]! @paginate(defaultCount: 10)
    translation(id: ID @eq): Translation @find

    propertyTypes(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyType!]! @all @SetLanguage
    propertyTypesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyType!]! @paginate(defaultCount: 10) @SetLanguage
    propertyType(id: ID @eq,language: String): PropertyType @find @SetLanguage

    dealTypes(language: String, orderBy: [OrderByClause!] @orderBy): [DealType!]! @all @SetLanguage
    dealTypes(language: String, orderBy: [OrderByClause!] @orderBy): [DealType!]! @paginate(defaultCount: 10) @SetLanguage
    dealType(id: ID @eq, language: String): DealType @find @SetLanguage

    buldingTypes(language: String, orderBy: [OrderByClause!] @orderBy): [BuldingType!]! @all @SetLanguage
    buldingTypesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [BuldingType!]! @paginate(defaultCount: 10) @SetLanguage
    buldingType(id: ID @eq,language: String): BuldingType @find @SetLanguage

    countries(orderBy: [OrderByClause!] @orderBy): [Country!]! @all
    countriesPaginate(orderBy: [OrderByClause!] @orderBy): [Country!]! @paginate(defaultCount: 10)
    country(id: ID @eq): Country @find

    cities(orderBy: [OrderByClause!] @orderBy): [City!]! @all
    citiesPaginate(orderBy: [OrderByClause!] @orderBy): [City!]! @paginate(defaultCount: 10)
    city(id: ID @eq): City @find



    properties(language: String, orderBy:OrderBy): [Property!]!  @SetLanguage
    propertiesPaginate( first:Int, page:Int, language: String, orderBy:OrderBy ): [Property!]!  @SetLanguage
    property(id: ID @eq,language: String): Property @find @SetLanguage

   

    propertyImages(orderBy: [OrderByClause!] @orderBy): [PropertyImage!]! @all
    propertyImagesPaginate(orderBy: [OrderByClause!] @orderBy): [PropertyImage!]! @paginate(defaultCount: 10)
    propertyImage(id: ID @eq): PropertyImage @find

    filtersValues(language: String, orderBy: [OrderByClause!] @orderBy): [FiltersValue!]! @all @SetLanguage
    filtersValuesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [FiltersValue!]! @paginate(defaultCount: 10) @SetLanguage
    filtersValue(id: ID @eq,language: String): FiltersValue @find @SetLanguage

    filters(language: String,orderBy: [OrderByClause!] @orderBy): [Filter!]! @all @SetLanguage
    filtersPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [Filter!]! @paginate(defaultCount: 10) @SetLanguage
    filter(id: ID @eq,language: String): Filter @find @SetLanguage

    filterGroups(language: String, orderBy: [OrderByClause!] @orderBy): [FilterGroup!]! @all @SetLanguage
    filterGroups(language: String, orderBy: [OrderByClause!] @orderBy): [FilterGroup!]! @paginate(defaultCount: 10) @SetLanguage
    filterGroup(id: ID @eq,language: String): FilterGroup @find @SetLanguage

    propertyDeals(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyDeal!]! @all @SetLanguage
    propertyDealsPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [PropertyDeal!]! @paginate(defaultCount: 10) @SetLanguage
    propertyDeal(id: ID @eq,language: String): PropertyDeal @find @SetLanguage

    translateDescription(orderBy: [OrderByClause!] @orderBy): [TranslateDescription!]! @all 
    translateDescriptionPaginate(orderBy: [OrderByClause!] @orderBy): [TranslateDescription!]! @paginate(defaultCount: 10)
    translateDescription(id: ID @eq): TranslateDescription @find


    userFavoriteProperties(language: String, orderBy: [OrderByClause!] @orderBy): [UserFavoriteProperty!]! @all @SetLanguage
    userFavoritePropertiesPaginate(language: String, orderBy: [OrderByClause!] @orderBy): [UserFavoriteProperty!]! @paginate(defaultCount: 10) @SetLanguage
    userFavoriteProperty(id: ID @eq,language: String): UserFavoriteProperty @find @SetLanguage


    #  create new Query

     propertyTypeFilterGroup(property_type_id:Int, language: String):String @SetLanguage
     propertyFilterGroupFilters(property_id:Int, language: String):String @SetLanguage

     test(language: String):String @SetLanguage

}

type Mutation {
    # login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    # forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    # updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @NewPasswordWithCodeInputValidation @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    # register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    # verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    # updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
     
    loginUser(input: LoginInput @spread): AuthPayloadLogin! @LoginInputValidation 
    registerUser(input: RegisterInput @spread): RegisterResponse! @RegisterInputValidation @SetLanguage
    verifyEmailUser(input: VerifyEmailInput! @spread): AuthPayload! @VerifyEmailInputValidation @SetLanguage
    forgotPasswordUser(input: ForgotPasswordInput!  @spread): ForgotPasswordResponse!  @ForgotPasswordInputValidation @SetLanguage
    resetPasswordUser(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @NewPasswordWithCodeInputValidation @SetLanguage



    updateUserProfile(input: updateUserProfileInput @spread): User! @UpdateUserProfileValidation @middleware(checks: ["auth:api"]) @SetLanguage
    deleteUserProfile(password: String!,language: String):Boolean @middleware(checks: ["auth:api"]) @SetLanguage



    createUserType(name: String!): UserType! @create
    updateUserType(id:ID!,name: String): UserType! @update
    deleteUserType(id:ID!): UserType! @delete

    createLanguage(name: String!,code:String!,flag_image:ImageAndType!, language: String): Language! 
    updateLanguage(id:ID!,name: String,code:String,flag_image:ImageAndType, language: String): Language! 
    deleteLanguage(id:ID!,language: String): Language! 

    createTranslation(name: String!, translated_name: String!, language_id: Int!): Translation! @create
    updateTranslation( id: ID!,name: String, translated_name: String, language_id: Int!): Translation! @update
    deleteTranslation(id:ID!): Translation! @delete

    createPropertyType(name: String!): PropertyType! @create
    updatePropertyType(id:ID!,name: String): PropertyType! @update
    deletePropertyType(id:ID!): PropertyType! @delete

    createDealType(name: String!): DealType! @create
    updateDealType(id:ID!,name: String): DealType! @update
    deleteDealType(id:ID!): DealType! @delete

    createBuldingType(name: String!): BuldingType! @create
    updateBuldingType(id:ID!,name: String): BuldingType! @update
    deleteBuldingType(id:ID!): BuldingType! @delete

    createCountry(name: String!): Country! @create
    updateCountry(id:ID!,name: String): Country! @update
    deleteCountry(id:ID!): Country! @delete

    createCity(name: String!, parent_id:Int): City! @create
    updateCity(id:ID!,name: String, parent_id:Int): City! @update
    deleteCity(id:ID!): City! @delete

    createFiltersValue(filter_id: Int!, property_id: Int!, value: String!): FiltersValue! @create
    updateFiltersValue( id: ID!,filter_id: Int, property_id: Int,value: String): FiltersValue! @update
    deleteFiltersValue(id:ID!): FiltersValue! @delete

    createFilter(name: String!, filter_type:FiltersValuesEnum, filter_group_id: Int ): Filter! @create
    updateFilter(id:ID!,name: String, filter_type:FiltersValuesEnum,  filter_group_id: Int): Filter! @update
    deleteFilter(id:ID!): Filter! @delete

    createFilterGroup(name: String!): FilterGroup! @create
    updateFilterGroup(id:ID!,name: String): FilterGroup! @update
    deleteFilterGroup(id:ID!): FilterGroup! @delete


    createProperty(input: CreatePropertyInput @spread):Property!  @middleware(checks: ["auth:api"]) @SetLanguage
    updateProperty( id: ID!,property_type_id: Int,deal_type_id: Int,property_number: Int,bulding_type_id: Int,latitude: Float,longitude: Float,country_id: Int,city_id: Int,address: String,postal_code: String,property_images:[ImageAndType],property_filter_values:[PropertyFilterValue!]): Property  @middleware(checks: ["auth:api"]) 
    deleteProperty(id:ID!): Property!  @middleware(checks: ["auth:api"]) 
    deletePropertyImages(images_ids:[Int!]!): String!  @middleware(checks: ["auth:api"]) 

    createPropertyDeal( property_id: Int!, deal_type_id: Int!, price: Float!): PropertyDeal! @create
    updatePropertyDeal(id:ID!,property_id: Int!, deal_type_id: Int!, price: Float!): PropertyDeal! @update
    deletePropertyDeal(id:ID!): PropertyDeal! @delete


    createTranslateDescription( property_id: Int!, language_id: Int!, description: String!): TranslateDescription! @create
    updateTranslateDescription(id:ID!,property_id: Int, language_id: Int, description: String): TranslateDescription! @update
    deleteTranslateDescription(id:ID!): TranslateDescription! @delete


    createUserFavoriteProperty(property_id:Int!, language: String): UserFavoriteProperty! @middleware(checks: ["auth:api"]) @SetLanguage
    updateUserFavoriteProperty(id:ID!, property_id:Int!, language: String): UserFavoriteProperty!  @middleware(checks: ["auth:api"]) @SetLanguage
    deleteUserFavoriteProperty(id:ID!): UserFavoriteProperty! @delete  @middleware(checks: ["auth:api"]) @SetLanguage


    #  test
    getimage:String
}

input updateUserProfileInput{
     image:ImageAndType
     full_name: String
     email: String
     old_password: String 
     password: String
     password_confirmation: String
     phone: [NewPhone!]
     update_phone: [UpdatePhone!]
     delete_phone: [Int!]
     language: String

}


input NewPhone{
    number: String!
    viber: Boolean
    whatsapp: Boolean
    telegram: Boolean

}
input UpdatePhone{
    phone_id: Int
    number: String!
    viber: Boolean
    whatsapp: Boolean
    telegram: Boolean
}




input CreatePropertyInput{
    property_type_id: Int!,
    property_deal_types:[PropertyDealTypes!]!,
    property_number: Int,
    bulding_type_id: Int!,
    latitude: Float!,
    longitude: Float!,
    country_id: Int!,
    city_id: Int!,
    address: String!,
    postal_code: String!,
    property_state: String!,
    property_images:[ImageAndType],
    property_filter_values: [PropertyFilterValue!], 
    translate_descriptions: [TranslateDescriptionInput],
    language: String
}

input PropertyDealTypes{
    deal_type_id: Int!,
    price: Float
}

input TranslateDescriptionInput{
    language: String!
    description: String!
}

input ImageAndType{
    type: String!
    image: String!
}

input PropertyFilterValue{
    filter_id: Int!
    value: String
}
input OrderBy{
    field: String!
    order: String!
}



type Phone{
    id: ID!
    number:String!
    user_id:ID!
    user: User!
    viber: Boolean
    whatsapp: Boolean
    telegram: Boolean
}

type UserType{
    id: ID!
    name: String!
    users:[User!]!
}

type User {
    id: ID!
    full_name: String! 
    picture: String
    email: String!
    phones:[Phone!]
    user_type:UserType! 
    first_time: Date
    is_admin: Boolean
    is_delete: Boolean
}

type Language {
    id: ID!
    name: String!
    code: String!
    flag_image: String!
    translations: [Translation!]!

}

type Translation{
    id: ID!
    name: String!
    translated_name: String!
    language: Language!
}


type PropertyType{
    id: ID!
    name: String!
    icon_class: String
    properties: [Property!]!
    filters: [Filter!]!
  
}


type DealType{
    id: ID!
    name: String!
    properties: [Property!]!
    property_deals: [PropertyDeal!]!
}

type BuldingType{
    id: ID!
    name: String!
    properties: [Property!]!
}

type Country{
    id: ID!
    name: String!
    properties: [Property!]!
}

type City{
    id: ID!
    name: String!
    parent_id: Int!
    properties: [Property!]!
}
type PropertyDeal{
    id: ID!
    deal_type:DealType
    property: Property
    price: Float!
}


type Property{
    id: ID!
    property_type: PropertyType
    user: User!
    property_deals: [PropertyDeal!]
    deal_types: [DealType!]
    property_number: Int
    bulding_type: BuldingType!
    latitude: Float!
    longitude: Float!
    country: Country
    city: City
    address: String
    postal_code: String
    property_state: String
    created_at: Date
    updated_at: Date
    property_images:[PropertyImage!] 
    property_images_paginat:[PropertyImage!] @hasMany(type: "paginator")
    filters_values: [FiltersValue!]
    translate_descriptions: [TranslateDescription!]
  

}
type TranslateDescription{
    id: ID!
    property: Property!
    language: Language!
}

type PropertyImage{
    id:ID!
    property: Property!
    name: String!
}

type FiltersValue{
    id: ID!
    filter: Filter!
    property: Property!
    value: String

}
type FilterPropertyType{
    id: ID!
    filter_id: Int!
    property_type_id: Int!
}
type FilterGroup{
    id: ID!
    name: String!
    filters: [Filter!]!
}


type Filter{
    id: ID!
    name: String!
    icon_class: String
    filter_type: FiltersValuesEnum!
    filters_values: [FiltersValue!]!
    property_types: [PropertyType!]!
    filter_group_id:ID
    filter_group: FilterGroup
}

type UserFavoriteProperty{
    id:ID
    user: User
    property: Property
    created_at: Date
    updated_at: Date
}

enum FiltersValuesEnum {
  text @enum(value: text)
  number @enum(value: number)
  checkbox @enum(value: checkbox)
}

enum PropertyStateEnum {
  good @enum(value: good)
  average @enum(value: average)
  poor @enum(value: poor)
}