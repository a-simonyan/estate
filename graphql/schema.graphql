"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    phones: [Phone!]! @paginate(defaultCount: 10)
    phone(id: ID @eq): Phone @find

    userTypes: [UserType!]! @paginate(defaultCount: 10)
    userType(id: ID @eq): Phone @find

    languages: [Language!]! @paginate(defaultCount: 10)
    language(id: ID @eq): Language @find

    translations: [Translation!]! @paginate(defaultCount: 10)
    translation(id: ID @eq): Translation @find

    propertyTypes: [PropertyType!]! @paginate(defaultCount: 10)
    ropertyType(id: ID @eq): PropertyType @find

    dealTypes: [DealType!]! @paginate(defaultCount: 10)
    dealType(id: ID @eq): DealType @find

    buldingTypes: [BuldingType!]! @paginate(defaultCount: 10)
    buldingType(id: ID @eq): BuldingType @find

    countries: [Country!]! @paginate(defaultCount: 10)
    country(id: ID @eq): Country @find

    cities: [City!]! @paginate(defaultCount: 10)
    city(id: ID @eq): City @find

    properties: [Property!]! @paginate(defaultCount: 10)
    property(id: ID @eq): Property @find

    propertyImages: [PropertyImage!]! @paginate(defaultCount: 10)
    propertyImage(id: ID @eq): PropertyImage @find

    filtersValues: [FiltersValue!]! @paginate(defaultCount: 10)
    filtersValue(id: ID @eq): FiltersValue @find

    filters: [Filter!]! @paginate(defaultCount: 10)
    filter(id: ID @eq): Filter @find


}

type Mutation {
    # login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    # forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    # register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    # verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    # updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
     
    loginUser(input: LoginInput @spread): AuthPayload! 
    registerUser(input: RegisterInput @spread): RegisterResponse! 
    verifyEmailUser(input: VerifyEmailInput! @spread): AuthPayload!
    forgotPasswordUser(input: ForgotPasswordInput! @spread): ForgotPasswordResponse!





    createUserType(name: String!): UserType! @create
    updateUserType(id:ID!,name: String): UserType! @update
    deleteUserType(id:ID!): UserType! @delete

    createLanguage(name: String!): Language! @create
    updateLanguage(id:ID!,name: String): Language! @update
    deleteLanguage(id:ID!): Language! @delete

    createTranslation(name: String!, translated_name: String!, language_id: Int!): Translation! @create
    updateTranslation( id: ID!,name: String, translated_name: String, language_id: Int!): Translation! @update
    deleteTranslation(id:ID!): Translation! @delete

    createPropertyType(name: String!): PropertyType! @create
    updatePropertyType(id:ID!,name: String): PropertyType! @update
    deletePropertyType(id:ID!): PropertyType! @delete

    createDealType(name: String!): DealType! @create
    updateDealType(id:ID!,name: String): DealType! @update
    deleteDealType(id:ID!): DealType! @delete

    createBuldingType(name: String!): BuldingType! @create
    updateBuldingType(id:ID!,name: String): BuldingType! @update
    deleteBuldingType(id:ID!): BuldingType! @delete

    createCountry(name: String!): Country! @create
    updateCountry(id:ID!,name: String): Country! @update
    deleteCountry(id:ID!): Country! @delete

    createCity(name: String!, parent_id:Int): City! @create
    updateCity(id:ID!,name: String, parent_id:Int): City! @update
    deleteCity(id:ID!): City! @delete

    createFiltersValue(filter_id: Int!, property_id: Int!, value: String!): FiltersValue! @create
    updateFiltersValue( id: ID!,filter_id: Int, property_id: Int,value: String): FiltersValue! @update
    deleteFiltersValue(id:ID!): FiltersValue! @delete

    createFilter(name: String!): Country! @create
    updateFilter(id:ID!,name: String): Country! @update
    deleteFilter(id:ID!): Country! @delete


    createProperty(property_type_id: Int!,deal_type_id: Int!,property_number: Int!,bulding_type_id: Int!,latitude: Float!,longitude: Float!,country_id: Int!,city_id: Int!,address: String!,postal_code: String!, property_images:String!): Property  @middleware(checks: ["auth:api"])
    updateProperty( id: ID!,property_type_id: Int,deal_type_id: Int,property_number: Int,bulding_type_id: Int,latitude: Float,longitude: Float,country_id: Int,city_id: Int,address: String,postal_code: String,property_images:String): Property  @middleware(checks: ["auth:api"]) 
    deleteProperty(id:ID!): Property!  @middleware(checks: ["auth:api"]) 
    deletePropertyImages(images_ids:[Int!]!): String!  @middleware(checks: ["auth:api"]) 





    #  test
    getimage:String
}


type PropertyImageArray{
    type: String!
    image: String!
}





type Phone{
    id: ID!
    number:String!
    user_id:ID!
    user: User!
}

type UserType{
    id: ID!
    name: String!
    users:[User!]!
}

type User {
    id: ID!
    first_name: String!
    last_name: String!
    picture: String!
    email: String!
    phones:[Phone!]!
    user_type:UserType! 
}

type Language {
    id: ID!
    name: String!
    translations: [Translation!]!

}

type Translation{
    id: ID!
    name: String!
    translated_name: String!
    language: Language!
}


type PropertyType{
    id: ID!
    name: String!
    properties: [Property!]!
}


type DealType{
    id: ID!
    name: String!
    properties: [Property!]!
}

type BuldingType{
    id: ID!
    name: String!
    properties: [Property!]!
}

type Country{
    id: ID!
    name: String!
    properties: [Property!]!
}

type City{
    id: ID!
    name: String!
    parent_id: Int!
    properties: [Property!]!
}

type Property{
    id: ID!
    property_type: PropertyType!
    user: User!
    deal_type: DealType!
    property_number: Int!
    bulding_type: BuldingType!
    latitude: Float!
    longitude: Float!
    country: Country!
    city: City!
    address: String!
    postal_code: String!
    property_images:[PropertyImage!]!
    filters_values: [FiltersValue!]!

}

type PropertyImage{
    id:ID!
    property: Property!
    name: String!
}

type FiltersValue{
    id: ID!
    filter: Filter!
    property: Property!
    value: String!

}

type Filter{
    id: ID!
    name: String!
    filter_type: FiltersValuesEnum!
    filters_values: FiltersValue!

}


enum FiltersValuesEnum {
  radio @enum(value: radio)
  text @enum(value: text)
  number @enum(value: number)
  textarea @enum(value: textarea)
}
